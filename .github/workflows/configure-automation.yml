name: Configure AI Test Automation

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - 'create'
          - 'update'
          - 'delete'
          - 'list'
          - 'test-run'
        default: 'create'
      cron_schedule:
        description: 'Cron schedule (e.g., "0 10 * * *" for daily at 10 AM UTC)'
        required: false
        type: string
        default: '0 10 * * *'
      test_description:
        description: 'Test description in plain English'
        required: false
        type: string
      config_name:
        description: 'Configuration name (for managing multiple schedules)'
        required: false
        type: string
        default: 'default'
      slack_channel:
        description: 'Slack channel for notifications'
        required: false
        type: string
        default: 'test-automation-platform-alerts'
      headless:
        description: 'Run browser in headless mode'
        required: false
        type: boolean
        default: true
      enable_slack:
        description: 'Enable Slack notifications'
        required: false
        type: boolean
        default: true

permissions:
  contents: write
  actions: write

env:
  CONFIG_FILE: 'automation-config.json'
  CONFIG_BRANCH: 'automation-config'

jobs:
  configure-automation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup configuration branch
      run: |
        echo "üîß Setting up configuration management..."
        
        # Create or switch to config branch
        if git show-ref --verify --quiet refs/heads/${{ env.CONFIG_BRANCH }}; then
          echo "üìÅ Configuration branch exists, switching to it..."
          git checkout ${{ env.CONFIG_BRANCH }}
        else
          echo "üìÅ Creating new configuration branch..."
          git checkout -b ${{ env.CONFIG_BRANCH }}
        fi
        
        # Create config directory if it doesn't exist
        mkdir -p .github/automation-configs

    - name: Load existing configuration
      id: load-config
      run: |
        echo "üìã Loading existing configuration..."
        
        CONFIG_PATH=".github/automation-configs/${{ env.CONFIG_FILE }}"
        
        if [ -f "$CONFIG_PATH" ]; then
          echo "‚úÖ Found existing configuration file"
          cat "$CONFIG_PATH"
          
          # Extract existing configurations
          EXISTING_CONFIGS=$(cat "$CONFIG_PATH" | jq '.' 2>/dev/null || echo '{}')
          echo "existing_configs<<EOF" >> $GITHUB_OUTPUT
          echo "$EXISTING_CONFIGS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "üìù No existing configuration found, creating new one"
          echo "existing_configs<<EOF" >> $GITHUB_OUTPUT
          echo '{}' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi

    - name: Process configuration action
      id: process-action
      run: |
        echo "‚öôÔ∏è Processing action: ${{ inputs.action }}"
        
        CONFIG_PATH=".github/automation-configs/${{ env.CONFIG_FILE }}"
        CONFIG_NAME="${{ inputs.config_name }}"
        
        # Parse existing configs
        EXISTING_CONFIGS='${{ steps.load-config.outputs.existing_configs }}'
        
        case "${{ inputs.action }}" in
          "create"|"update")
            echo "üìù Creating/Updating configuration: $CONFIG_NAME"
            
            # Validate cron schedule
            if [ -z "${{ inputs.cron_schedule }}" ]; then
              echo "‚ùå Cron schedule is required for create/update"
              exit 1
            fi
            
            # Validate test description
            if [ -z "${{ inputs.test_description }}" ]; then
              echo "‚ùå Test description is required for create/update"
              exit 1
            fi
            
            # Create new configuration
            NEW_CONFIG=$(jq -n \
              --arg name "$CONFIG_NAME" \
              --arg cron "${{ inputs.cron_schedule }}" \
              --arg description "${{ inputs.test_description }}" \
              --arg slack_channel "${{ inputs.slack_channel }}" \
              --argjson headless "${{ inputs.headless }}" \
              --argjson enable_slack "${{ inputs.enable_slack }}" \
              --arg created_at "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
              --arg created_by "${{ github.actor }}" \
              '{
                name: $name,
                cron_schedule: $cron,
                test_description: $description,
                slack_channel: $slack_channel,
                headless: $headless,
                enable_slack: $enable_slack,
                created_at: $created_at,
                created_by: $created_by,
                last_updated: $created_at,
                updated_by: $created_by,
                is_active: true
              }')
            
            # Update existing configs
            UPDATED_CONFIGS=$(echo "$EXISTING_CONFIGS" | jq --arg name "$CONFIG_NAME" --argjson config "$NEW_CONFIG" '. + {($name): $config}')
            
            echo "‚úÖ Configuration created/updated successfully"
            echo "config_name<<EOF" >> $GITHUB_OUTPUT
            echo "$CONFIG_NAME" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            ;;
            
          "delete")
            echo "üóëÔ∏è Deleting configuration: $CONFIG_NAME"
            
            if [ "$CONFIG_NAME" = "default" ]; then
              echo "‚ùå Cannot delete default configuration"
              exit 1
            fi
            
            # Remove configuration
            UPDATED_CONFIGS=$(echo "$EXISTING_CONFIGS" | jq --arg name "$CONFIG_NAME" 'del(.[$name])')
            
            echo "‚úÖ Configuration deleted successfully"
            echo "config_name<<EOF" >> $GITHUB_OUTPUT
            echo "$CONFIG_NAME" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            ;;
            
          "list")
            echo "üìã Listing all configurations:"
            echo "$EXISTING_CONFIGS" | jq '.'
            
            CONFIG_COUNT=$(echo "$EXISTING_CONFIGS" | jq 'length')
            echo "Total configurations: $CONFIG_COUNT"
            
            echo "config_name<<EOF" >> $GITHUB_OUTPUT
            echo "list" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            UPDATED_CONFIGS="$EXISTING_CONFIGS"
            ;;
            
          "test-run")
            echo "üß™ Running test with configuration: $CONFIG_NAME"
            
            # Get configuration
            SELECTED_CONFIG=$(echo "$EXISTING_CONFIGS" | jq --arg name "$CONFIG_NAME" '.[$name]')
            
            if [ "$SELECTED_CONFIG" = "null" ]; then
              echo "‚ùå Configuration '$CONFIG_NAME' not found"
              exit 1
            fi
            
            echo "config_name<<EOF" >> $GITHUB_OUTPUT
            echo "$CONFIG_NAME" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            UPDATED_CONFIGS="$EXISTING_CONFIGS"
            ;;
            
          *)
            echo "‚ùå Unknown action: ${{ inputs.action }}"
            exit 1
            ;;
        esac
        
        # Save updated configs
        echo "updated_configs<<EOF" >> $GITHUB_OUTPUT
        echo "$UPDATED_CONFIGS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Save configuration
      if: steps.process-action.outputs.config_name != 'list'
      run: |
        echo "üíæ Saving configuration..."
        
        CONFIG_PATH=".github/automation-configs/${{ env.CONFIG_FILE }}"
        UPDATED_CONFIGS='${{ steps.process-action.outputs.updated_configs }}'
        
        # Save to file
        echo "$UPDATED_CONFIGS" | jq '.' > "$CONFIG_PATH"
        
        echo "‚úÖ Configuration saved to: $CONFIG_PATH"
        echo "üìÑ Configuration content:"
        cat "$CONFIG_PATH"

    - name: Create scheduled workflow file
      if: inputs.action == 'create' || inputs.action == 'update'
      run: |
        echo "üîÑ Creating scheduled workflow file..."
        
        CONFIG_NAME="${{ steps.process-action.outputs.config_name }}"
        CONFIG_PATH=".github/automation-configs/${{ env.CONFIG_FILE }}"
        
        # Get the configuration
        CONFIG_DATA=$(cat "$CONFIG_PATH" | jq --arg name "$CONFIG_NAME" '.[$name]')
        
        CRON_SCHEDULE=$(echo "$CONFIG_DATA" | jq -r '.cron_schedule')
        TEST_DESCRIPTION=$(echo "$CONFIG_DATA" | jq -r '.test_description')
        
        # Sanitize config name for filename
        SANITIZED_CONFIG_NAME=$(echo "$CONFIG_NAME" | sed 's/ /-/g' | sed 's/[^a-zA-Z0-9-]//g' | tr '[:upper:]' '[:lower:]')
        WORKFLOW_FILE=".github/workflows/daily-automation-$SANITIZED_CONFIG_NAME.yml"
        
        echo "üìÖ Cron Schedule: $CRON_SCHEDULE"
        echo "üìù Test Description: $TEST_DESCRIPTION"
        echo "üìÅ Workflow File: $WORKFLOW_FILE"
        
        # Create a simple workflow file that calls the main workflow
        echo "name: Daily AI Test Automation - $CONFIG_NAME" > "$WORKFLOW_FILE"
        echo "" >> "$WORKFLOW_FILE"
        echo "on:" >> "$WORKFLOW_FILE"
        echo "  schedule:" >> "$WORKFLOW_FILE"
        echo "    - cron: '$CRON_SCHEDULE'" >> "$WORKFLOW_FILE"
        echo "  workflow_dispatch:" >> "$WORKFLOW_FILE"
        echo "    inputs:" >> "$WORKFLOW_FILE"
        echo "      config_name:" >> "$WORKFLOW_FILE"
        echo "        description: 'Configuration name to use'" >> "$WORKFLOW_FILE"
        echo "        required: true" >> "$WORKFLOW_FILE"
        echo "        type: string" >> "$WORKFLOW_FILE"
        echo "        default: '$CONFIG_NAME'" >> "$WORKFLOW_FILE"
        echo "" >> "$WORKFLOW_FILE"
        echo "permissions:" >> "$WORKFLOW_FILE"
        echo "  contents: read" >> "$WORKFLOW_FILE"
        echo "  actions: read" >> "$WORKFLOW_FILE"
        echo "" >> "$WORKFLOW_FILE"
        echo "jobs:" >> "$WORKFLOW_FILE"
        echo "  daily-test-automation:" >> "$WORKFLOW_FILE"
        echo "    uses: ./.github/workflows/daily-test-automation.yml" >> "$WORKFLOW_FILE"
        echo "    with:" >> "$WORKFLOW_FILE"
        echo "      config_name: '$CONFIG_NAME'" >> "$WORKFLOW_FILE"
        echo "    secrets: inherit" >> "$WORKFLOW_FILE"

        echo "‚úÖ Scheduled workflow file created: $WORKFLOW_FILE"

    - name: Copy workflow to main branch
      if: (inputs.action == 'create' || inputs.action == 'update') && steps.process-action.outputs.config_name != 'list'
      run: |
        echo "üìÅ Copying workflow file to main branch..."
        
        CONFIG_NAME="${{ steps.process-action.outputs.config_name }}"
        SANITIZED_CONFIG_NAME=$(echo "$CONFIG_NAME" | sed 's/ /-/g' | sed 's/[^a-zA-Z0-9-]//g' | tr '[:upper:]' '[:lower:]')
        WORKFLOW_FILE=".github/workflows/daily-automation-$SANITIZED_CONFIG_NAME.yml"
        
        # Switch to main branch
        git checkout main
        git pull origin main
        
        # Copy the workflow file
        if [ -f "$WORKFLOW_FILE" ]; then
          echo "‚úÖ Workflow file exists: $WORKFLOW_FILE"
          git add "$WORKFLOW_FILE"
          echo "‚úÖ Workflow file added to main branch"
        else
          echo "‚ùå Workflow file not found: $WORKFLOW_FILE"
          exit 1
        fi

    - name: Commit and push changes
      if: steps.process-action.outputs.config_name != 'list'
      run: |
        echo "üíæ Committing configuration changes..."
        
        # Set git configuration
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        
        # Set up authentication for pushing
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        
        # Add all changes
        git add .
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          # Commit with descriptive message
          case "${{ inputs.action }}" in
            "create")
              COMMIT_MSG="ü§ñ Create automation configuration: ${{ steps.process-action.outputs.config_name }}"
              ;;
            "update")
              COMMIT_MSG="üîÑ Update automation configuration: ${{ steps.process-action.outputs.config_name }}"
              ;;
            "delete")
              COMMIT_MSG="üóëÔ∏è Delete automation configuration: ${{ steps.process-action.outputs.config_name }}"
              ;;
            "test-run")
              COMMIT_MSG="üß™ Test run for configuration: ${{ steps.process-action.outputs.config_name }}"
              ;;
          esac
          
          # Add workflow file info to commit message
          SANITIZED_CONFIG_NAME=$(echo "${{ steps.process-action.outputs.config_name }}" | sed 's/ /-/g' | sed 's/[^a-zA-Z0-9-]//g' | tr '[:upper:]' '[:lower:]')
          WORKFLOW_FILE=".github/workflows/daily-automation-$SANITIZED_CONFIG_NAME.yml"
          
          if [ -f "$WORKFLOW_FILE" ]; then
            COMMIT_MSG="$COMMIT_MSG (workflow: daily-automation-$SANITIZED_CONFIG_NAME.yml)"
          fi
          
          git commit -m "$COMMIT_MSG"
          echo "‚úÖ Changes committed successfully"
        fi
        
        # Push to both branches
        echo "üöÄ Pushing to main branch..."
        if git push origin main; then
          echo "‚úÖ Successfully pushed to main branch"
        else
          echo "‚ùå Failed to push to main branch"
        fi
        
        echo "üöÄ Pushing to config branch: ${{ env.CONFIG_BRANCH }}"
        if git push origin ${{ env.CONFIG_BRANCH }}; then
          echo "‚úÖ Successfully pushed to config branch"
        else
          echo "‚ùå Failed to push to config branch"
          echo "This might be due to permissions or authentication issues"
        fi


    - name: Run test execution
      if: inputs.action == 'test-run'
      run: |
        echo "üß™ Running test execution for configuration: ${{ steps.process-action.outputs.config_name }}"
        
        # Trigger the specific workflow
        WORKFLOW_FILE="daily-automation-${{ steps.process-action.outputs.config_name }}.yml"
        
        echo "üöÄ Triggering workflow: $WORKFLOW_FILE"
        echo "This will run the automation with the configured parameters"
        echo "Check the Actions tab to see the execution results"

    - name: Summary
      run: |
        echo "## üéØ Configuration Management Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Calculate sanitized config name for display
        SANITIZED_CONFIG_NAME=$(echo "${{ steps.process-action.outputs.config_name }}" | sed 's/ /-/g' | sed 's/[^a-zA-Z0-9-]//g' | tr '[:upper:]' '[:lower:]')
        
        case "${{ inputs.action }}" in
          "create"|"update")
            echo "‚úÖ **Configuration ${{ inputs.action }}d successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Configuration Name:** ${{ steps.process-action.outputs.config_name }}" >> $GITHUB_STEP_SUMMARY
            echo "**Cron Schedule:** ${{ inputs.cron_schedule }}" >> $GITHUB_STEP_SUMMARY
            echo "**Test Description:** ${{ inputs.test_description }}" >> $GITHUB_STEP_SUMMARY
            echo "**Slack Channel:** ${{ inputs.slack_channel }}" >> $GITHUB_STEP_SUMMARY
            echo "**Headless Mode:** ${{ inputs.headless }}" >> $GITHUB_STEP_SUMMARY
            echo "**Slack Notifications:** ${{ inputs.enable_slack }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üîÑ **Configuration saved:** \`$SANITIZED_CONFIG_NAME\`" >> $GITHUB_STEP_SUMMARY
            echo "üîÑ **Automated workflow created:** \`.github/workflows/daily-automation-$SANITIZED_CONFIG_NAME.yml\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üìÅ **Configuration Status:**" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Configuration saved to automation-config branch" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Scheduled workflow created in main branch" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Ready to run automatically based on cron schedule" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üìÖ **Next Steps:**" >> $GITHUB_STEP_SUMMARY
            echo "The workflow will run automatically based on your cron schedule" >> $GITHUB_STEP_SUMMARY
            echo "You can manually trigger it anytime from the Actions tab" >> $GITHUB_STEP_SUMMARY
            echo "Use 'Configure AI Test Automation' workflow to modify settings" >> $GITHUB_STEP_SUMMARY
            ;;
            
          "delete")
            echo "üóëÔ∏è **Configuration deleted successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Deleted Configuration:** ${{ steps.process-action.outputs.config_name }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ö†Ô∏è **Note:** The corresponding workflow file has been removed" >> $GITHUB_STEP_SUMMARY
            ;;
            
          "list")
            echo "üìã **All Configurations:**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            echo '${{ steps.process-action.outputs.updated_configs }}' | jq '.' >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            ;;
            
          "test-run")
            echo "üß™ **Test Run Initiated!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Configuration:** ${{ steps.process-action.outputs.config_name }}" >> $GITHUB_STEP_SUMMARY
            echo "**Status:** Test execution triggered" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üìä **Check the Actions tab to monitor the test execution**" >> $GITHUB_STEP_SUMMARY
            ;;
        esac
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üîó **Useful Links:**" >> $GITHUB_STEP_SUMMARY
        echo "- [Actions Dashboard](https://github.com/${{ github.repository }}/actions)" >> $GITHUB_STEP_SUMMARY
        echo "- [Configuration Branch](https://github.com/${{ github.repository }}/tree/${{ env.CONFIG_BRANCH }})" >> $GITHUB_STEP_SUMMARY