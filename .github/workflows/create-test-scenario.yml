name: Create Test Scenario

on:
  workflow_dispatch:
    inputs:
      test_description:
        description: 'Test description in plain English'
        required: true
        type: string
      openai_api_key:
        description: 'OpenAI API Key'
        required: true
        type: string

env:
  TEST_DESCRIPTION: ${{ inputs.test_description }}
  OPENAI_API_KEY: ${{ inputs.openai_api_key }}

jobs:
  create-test-scenario:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      run: |
        cd backend
        npm ci

    - name: Build backend
      run: |
        cd backend
        npm run build

    - name: Start backend server
      run: |
        cd backend
        DB_DISABLED=true NODE_ENV=development PORT=3001 npm start &
        echo "Backend server starting..."
        
        # Wait for backend to be ready
        for i in {1..30}; do
          if curl -f http://localhost:3001/health >/dev/null 2>&1; then
            echo "‚úÖ Backend is ready!"
            break
          fi
          echo "Waiting for backend... ($i/30)"
          sleep 2
        done

    - name: Generate and create complete test scenario
      run: |
        echo "üöÄ Generating and creating complete test scenario from: ${{ env.TEST_DESCRIPTION }}" && TEST_DESC="${{ env.TEST_DESCRIPTION }}" && echo "Test description length: ${#TEST_DESC}" && if [ -z "$TEST_DESC" ]; then echo "‚ùå No test description provided"; echo "Raw env value: '${{ env.TEST_DESCRIPTION }}'"; exit 1; fi && echo "‚úÖ Test description provided" && echo "Calling API to parse steps..." && STEPS_RESPONSE=$(curl -X POST http://localhost:3001/api/nlp/parse -H "Content-Type: application/json" -d "{\"text\": \"$TEST_DESC\"}" -w "\n%{http_code}") && HTTP_CODE=$(echo "$STEPS_RESPONSE" | tail -n1) && STEPS_BODY=$(echo "$STEPS_RESPONSE" | sed '$d') && echo "Steps HTTP Code: $HTTP_CODE" && echo "Steps Response Length: ${#STEPS_BODY}" && echo "Success: $(echo "$STEPS_BODY" | grep -o '"success":true' || echo 'false')" && if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 201 ]; then echo "‚úÖ Test steps generated successfully!"; echo "Creating payload..." && echo "$STEPS_BODY" | jq -c '{steps: .steps, language: "typescript"}' > /tmp/steps.json && echo "Payload created:" && cat /tmp/steps.json && echo "" && echo "Calling API to generate code..." && CODE_RESPONSE=$(curl -X POST http://localhost:3001/api/nlp/generate-code -H "Content-Type: application/json" -d @/tmp/steps.json -w "\n%{http_code}") && CODE_HTTP_CODE=$(echo "$CODE_RESPONSE" | tail -n1) && CODE_BODY=$(echo "$CODE_RESPONSE" | sed '$d') && echo "Code HTTP Code: $CODE_HTTP_CODE" && echo "Code Response Length: ${#CODE_BODY}" && echo "Code Success: $(echo "$CODE_BODY" | grep -o '"success":true' || echo 'false')" && if [ "$CODE_HTTP_CODE" -eq 200 ] || [ "$CODE_HTTP_CODE" -eq 201 ]; then echo "‚úÖ Test code generated successfully!"; echo "Creating test scenario files..." && mkdir -p test-scenarios && echo "Extracting test steps..." && TEST_STEPS=$(echo "$STEPS_BODY" | jq -r '.steps // .parsedSteps // "No steps generated"' 2>/dev/null || echo "No steps generated - parsing failed") && echo "Creating comprehensive test scenario file..." && echo "# Test Scenario" > test-scenarios/test-scenario-${{ github.run_id }}.md && echo "Generated on: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> test-scenarios/test-scenario-${{ github.run_id }}.md && echo "Triggered by: ${{ github.actor }}" >> test-scenarios/test-scenario-${{ github.run_id }}.md && echo "Workflow Run: ${{ github.run_id }}" >> test-scenarios/test-scenario-${{ github.run_id }}.md && echo "" >> test-scenarios/test-scenario-${{ github.run_id }}.md && echo "## Test Description" >> test-scenarios/test-scenario-${{ github.run_id }}.md && echo "$TEST_DESC" >> test-scenarios/test-scenario-${{ github.run_id }}.md && echo "" >> test-scenarios/test-scenario-${{ github.run_id }}.md && echo "## Generated Test Steps" >> test-scenarios/test-scenario-${{ github.run_id }}.md && echo "\`\`\`json" >> test-scenarios/test-scenario-${{ github.run_id }}.md && echo "$STEPS_BODY" >> test-scenarios/test-scenario-${{ github.run_id }}.md && echo "\`\`\`" >> test-scenarios/test-scenario-${{ github.run_id }}.md && echo "" >> test-scenarios/test-scenario-${{ github.run_id }}.md && echo "## Generated Test Code Response" >> test-scenarios/test-scenario-${{ github.run_id }}.md && echo "\`\`\`json" >> test-scenarios/test-scenario-${{ github.run_id }}.md && echo "$CODE_BODY" >> test-scenarios/test-scenario-${{ github.run_id }}.md && echo "\`\`\`" >> test-scenarios/test-scenario-${{ github.run_id }}.md && echo "" >> test-scenarios/test-scenario-${{ github.run_id }}.md && echo "## Test Steps (Human Readable)" >> test-scenarios/test-scenario-${{ github.run_id }}.md && echo "$TEST_STEPS" >> test-scenarios/test-scenario-${{ github.run_id }}.md && echo "" >> test-scenarios/test-scenario-${{ github.run_id }}.md && echo "## Usage Instructions" >> test-scenarios/test-scenario-${{ github.run_id }}.md && echo "1. Extract the code from the JSON response above" >> test-scenarios/test-scenario-${{ github.run_id }}.md && echo "2. Save it as a .js file in your test project" >> test-scenarios/test-scenario-${{ github.run_id }}.md && echo "3. Run with: npx playwright test your-test-file.js" >> test-scenarios/test-scenario-${{ github.run_id }}.md && echo "Creating raw response file..." && echo "$CODE_BODY" > test-scenarios/code-response-${{ github.run_id }}.json && echo "Creating steps file..." && echo "$TEST_STEPS" > test-scenarios/test-steps-${{ github.run_id }}.txt && echo "‚úÖ Test scenario files created successfully!" && echo "Files created:" && ls -la test-scenarios/ && echo "Main file size:" && wc -c test-scenarios/test-scenario-${{ github.run_id }}.md; else echo "‚ùå Failed to generate test code"; echo "Raw code response: $CODE_RESPONSE"; exit 1; fi; else echo "‚ùå Failed to generate test steps"; echo "Raw steps response: $STEPS_RESPONSE"; echo "Debug: TEST_DESC value: '$TEST_DESC'"; echo "Debug: TEST_DESC length: ${#TEST_DESC}"; exit 1; fi && rm -f /tmp/steps.json

    - name: Upload test scenarios
      uses: actions/upload-artifact@v4
      with:
        name: test-scenarios-${{ github.run_id }}
        path: test-scenarios/
        retention-days: 30

    - name: Comment on workflow
      run: |
        echo "‚úÖ Test scenario created successfully!"
        echo "üìÅ Files uploaded as artifacts:"
        echo "   - test-scenario-${{ github.run_id }}.md (comprehensive report)"
        echo "   - code-response-${{ github.run_id }}.json (raw code response)"
        echo "   - test-steps-${{ github.run_id }}.txt (human readable steps)"
        echo ""
        echo "üéØ Next steps:"
        echo "   1. Download the artifacts from this workflow run"
        echo "   2. Extract the test code from the JSON response"
        echo "   3. Save as a .js file in your test project"
        echo "   4. Run with: npx playwright test your-test-file.js"